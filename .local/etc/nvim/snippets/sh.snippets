# most are from https://github.com/dylanaraps/pure-sh-bible

snippet lstrip Strip pattern from start of string
	lstrip() {
		# Usage: lstrip "string" "pattern"
		printf '%s\n' "${1##"\$2"}"
	}

snippet rstrip Strip pattern from end of string
	rstrip() {
		# Usage: rstrip "string" "pattern"
		printf '%s\n' "${1%%"\$2"}"
	}

snippet strip Strip pattern from start and end of string
	strip() {
		# Usage: strip "string" "pattern1" "pattern2"
		tmp="${1##"\$2"}"
		printf '%s\n' "${tmp%%"\$3"}"
	}

snippet trimstring Trim leading and trailing white-space from string
	trimstring() {
		# Usage: trimstring "   example   string    "
		trim=${1#"${1%%[![:space:]]*}"}
		trim=${trim%"${trim##*[![:space:]]}"}
		printf '%s\n' "\$trim"
	}

snippet trimall Trim all white-space from string and truncate spaces
	trimall() {
		# Usage: trimall "   example   string    "
		set -f
		# shellcheck disable=SC2086,SC2048
		set -- $*
		printf '%s\n' "$*"
		set +f
	}

snippet split Split a string on a delimiter
	split() {
		# Usage: split "string" "delimiter"
		set -f
		old_ifs=\$IFS
		IFS=\$2
		# shellcheck disable=SC2086
		set -- \$1
		printf '%s\n' "$@"
		IFS=\$old_ifs
		set +f
	}

snippet trimquotes Trim quotes from a string
	trimquotes() {
		# Usage: trimquotes "string"
		set -f
		old_ifs=\$IFS
		IFS=\"\'
		# shellcheck disable=SC2086
		set -- \$1
		IFS=
		printf '%s\n' "$*"
		IFS=\$old_ifs
		set +f
	}

snippet keyval Parsing a key=val file.
	while IFS='=' read -r key val; do
		[ "${key##\#*}" ] || continue
		printf '%s: %s\n' "\$key" "\$val"
	done < "$file"

snippet head Get the first N lines of a file
	head() {
		# Usage: head "n" "file"
		while IFS= read -r line; do
			printf '%s\n' "\$line"
			i=$((i+1))
			[ "$i" = "\$1" ] && return
		done < "\$2"
		[ -n "\$line" ] && printf %s "\$line"
	}

snippet lines Get the number of lines in a file
	lines() {
		# Usage: lines "file"
		while IFS= read -r line || [ -n "\$line" ]; do
			lines=$((lines+1))
		done < "\$1"
		printf '%s\n' "\$lines"
	}

snippet count Count files or directories in directory
	count() {
		# Usage: count /path/to/dir/*
		#        count /path/to/dir/*/
		[ -e "\$1" ]\
			&& printf '%s\n' "$#"\
			|| printf '%s\n' 0
	}

snippet touch Create an empty file
	:>$file

snippet dirname Get the directory name of a file path
	dirname() {
		# Usage: dirname "path"
		dir=\${1:-.}
		dir=${dir%%"${dir##*[!/]}"}
		[ "${dir##*/*}" ] && dir=.
		dir=${dir%/*}
		dir=${dir%%"${dir##*[!/]}"}
		printf '%s\n' "\${dir:-/}"
	}

snippet basename Get the base-name of a file path
	basename() {
		# Usage: basename "path" ["suffix"]
		dir=${1%"${1##*[!/]}"}
		dir=${dir##*/}
		dir=${dir%"\$2"}
		printf '%s\n' "\${dir:-/}"
	}

snippet fori Loop over a (small) range of numbers
	for i in 0 1 2 3 4 5 6 7 8 9 10; do
		printf '%s\n' "$i"
	done

snippet for Loop over a variable range of numbers
	start=0
	end=50
	while [ "\$start" -le "\$end" ]; do
		printf '%s\n' "\$start"
		start=$((start+1))
	done

snippet read Loop over the contents of a file
	while IFS= read -r line || [ -n "\$line" ]; do
		printf '%s\n' "\$line"
	done < "$file"

snippet foreground Set text foreground color
	\033[38;5;$NUM m

snippet background Set text background color
	\033[48;5;$NUM m

snippet foregroundRGB Set text foreground color to RGB color
	\033[38;2;<R>;<G>;<B>m

snippet backgroundRGB Set text background color to RGB color
	\033[48;2;<R>;<G>;<B>m

snippet reset Reset text formatting and colors
	\033[m

snippet bold Bold text
	\033[1m

snippet faint Faint text
	\033[2m

snippet italic Italic text
	\033[3m

snippet underline Underline text
	\033[4m

snippet blink Slow blink
	\033[5m

snippet swap Swap foreground and background colors
	\033[7m

snippet hidden Hidden text
	\033[8m

snippet strike Strike-through text
	\033[9m

snippet lenght Length of VAR in characters
	${#$VAR}

snippet isfloat Check if a number is a float
	isfloat() {
		# Usage: isfloat "number"
		[ -z "${1##*.*}" ] &&
			printf %f "\$1" >/dev/null 2>&1
	}

snippet isint Check if a number is an integer
	isint() {
		# Usage: isint "number"
		printf %d "\$1" >/dev/null 2>&1
	}
